package main

import (
	"crypto/rsa"
	"fmt"
	"os"
)

var key = []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}
var in = []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff}
var out = []byte{0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89}

func encrypt(key []byte, in []byte) ([]byte, error) {
	c, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}
	out := make([]byte, len(in))
	c.Encrypt(out, in)

	return out, nil
}

func main() {
	c, err := aes.NewCipher(key)
	if err != nil {
		fmt.Printf("NewCipher(%d bytes) = %s", len(key), err)
		os.Exit(-1)
	}
	out := make([]byte, len(in))
	c.Encrypt(out, in)
	for j, v := range out {
		if v != out[j] {
			fmt.Printf("Cipher.Encrypt: out[%d] = %#x, want %#x", j, v, out[j])
			os.Exit(-1)
		}
	}

	fmt.Printf("GOOD!\n")
}
